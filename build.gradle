plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.11'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'com.diffplug.spotless' version '6.11.0'
    id "org.sonarqube" version "3.5.0.2730"
}

repositories {
    mavenCentral()
}
apply plugin: 'org.sonarqube'

sonarqube {
    properties {
        property "sonar.projectKey", "TodaysFail_TodaysFail-Backend"
        property "sonar.organization", "sonar-cloud-key-todaysfail"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.sources', 'src'
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.exclusions', '**/test/**, **/Q*.java, **/*Doc*.java, **/resources/** ,**/*Application*.java , **/*Config*.java,' +
                '**/*Dto*.java, **/*Request*.java, **/*Response*.java ,**/*Exception*.java ,**/*ErrorCode*.java'
        property 'sonar.java.coveragePlugin', 'jacoco'
    }
}

subprojects {
    group = 'com.todaysfail'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    jacoco {
        toolVersion = '0.8.8'
        // reportsDir = ${project.reporting.baseDir}/jacoco
    }

    jacocoTestReport {
        dependsOn test
        reports {
            html.enabled true // html 설정
            csv.enabled true // csv 설정
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco.xml")
        }
        def Qdomains = []

        for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
            Qdomains.add(qPattern + '*')
        }

        afterEvaluate {
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, excludes: [
                                "**/*Application*",
                                "**/*Config*",
                                "**/*Dto*",
                                "**/*Request*",
                                "**/*Response*",
                                "**/*Interceptor*",
                                "**/*Exception*"
                        ] + Qdomains)
                    })
            )
        }
    }
    apply plugin: 'org.sonarqube'

    sonarqube {
        properties {
            property 'sonar.java.binaries', "${buildDir}/classes"
            property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco.xml"
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }
}
bootJar.enabled = false

spotless {
    java {
        target("**/*.java")
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        importOrder()
        indentWithTabs()
        googleJavaFormat().aosp()
    }
}